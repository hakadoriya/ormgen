// Code generated by ormgen; DO NOT EDIT.
//
// source: group/group.go

package group

import (
	"fmt"
	"strings"
)

func (s *Group) TableName() string {
	return "group"
}

func (s *Group) ColumnsName() []string {
	return []string{"id", "name"}
}

func (s *Group) ColumnName_ID() string {
	return "id"
}

func (s *Group) ColumnName_Name() string {
	return "name"
}

type GroupSlice []*Group

func (s GroupSlice) GetSlice() []*Group {
	return s
}

func (s GroupSlice) TableName() string {
	return "group"
}

func (s GroupSlice) ColumnsName() []string {
	return []string{"id", "name"}
}

func (s GroupSlice) ColumnName_ID() string {
	return "id"
}

func (s GroupSlice) ColumnName_Name() string {
	return "name"
}

func (s GroupSlice) MapByPK() map[string]*Group {
	result := make(map[string]*Group)
	for _, v := range s {
		pkStringSlice := []string{fmt.Sprint(v.ID)}
		pk := strings.Join(pkStringSlice, "-")
		if _, ok := result[pk]; ok {
			panic(fmt.Errorf("duplicate primary key: table=%T, pk=%s, one=%v, other=%v", v, pk, v, result[pk]))
		}
		result[pk] = v
	}
	return result
}
