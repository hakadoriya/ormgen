// Code generated by ormgen; DO NOT EDIT.
//
// source: user/user.go

package user

import (
	"fmt"
	"strings"
)

func (s *User) TableName() string {
	return "user"
}

func (s *User) ColumnsName() []string {
	return []string{"user_id", "username", "address", "group_id"}
}

func (s *User) ColumnName_UserID() string {
	return "user_id"
}

func (s *User) ColumnName_Username() string {
	return "username"
}

func (s *User) ColumnName_Address() string {
	return "address"
}

func (s *User) ColumnName_GroupID() string {
	return "group_id"
}

type UserSlice []*User

func (s UserSlice) GetSlice() []*User {
	return s
}

func (s UserSlice) TableName() string {
	return "user"
}

func (s UserSlice) ColumnsName() []string {
	return []string{"user_id", "username", "address", "group_id"}
}

func (s UserSlice) ColumnName_UserID() string {
	return "user_id"
}

func (s UserSlice) ColumnName_Username() string {
	return "username"
}

func (s UserSlice) ColumnName_Address() string {
	return "address"
}

func (s UserSlice) ColumnName_GroupID() string {
	return "group_id"
}

func (s UserSlice) MapByPK() map[string]*User {
	result := make(map[string]*User)
	for _, v := range s {
		pkStringSlice := []string{fmt.Sprint(v.UserID)}
		pk := strings.Join(pkStringSlice, "-")
		if _, ok := result[pk]; ok {
			panic(fmt.Errorf("duplicate primary key: table=%T, pk=%s, one=%v, other=%v", v, pk, v, result[pk]))
		}
		result[pk] = v
	}
	return result
}

func (s *AdminUser) TableName() string {
	return "admin_user"
}

func (s *AdminUser) ColumnsName() []string {
	return []string{"admin_user_id", "username", "group_id"}
}

func (s *AdminUser) ColumnName_AdminUserID() string {
	return "admin_user_id"
}

func (s *AdminUser) ColumnName_Username() string {
	return "username"
}

func (s *AdminUser) ColumnName_GroupID() string {
	return "group_id"
}

type AdminUserSlice []*AdminUser

func (s AdminUserSlice) GetSlice() []*AdminUser {
	return s
}

func (s AdminUserSlice) TableName() string {
	return "admin_user"
}

func (s AdminUserSlice) ColumnsName() []string {
	return []string{"admin_user_id", "username", "group_id"}
}

func (s AdminUserSlice) ColumnName_AdminUserID() string {
	return "admin_user_id"
}

func (s AdminUserSlice) ColumnName_Username() string {
	return "username"
}

func (s AdminUserSlice) ColumnName_GroupID() string {
	return "group_id"
}

func (s AdminUserSlice) MapByPK() map[string]*AdminUser {
	result := make(map[string]*AdminUser)
	for _, v := range s {
		pkStringSlice := []string{fmt.Sprint(v.AdminUserID)}
		pk := strings.Join(pkStringSlice, "-")
		if _, ok := result[pk]; ok {
			panic(fmt.Errorf("duplicate primary key: table=%T, pk=%s, one=%v, other=%v", v, pk, v, result[pk]))
		}
		result[pk] = v
	}
	return result
}
